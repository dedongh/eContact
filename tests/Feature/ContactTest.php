<?php

namespace Tests\Feature;

use App\Models\Contact;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;


class ContactTest extends TestCase
{
    use RefreshDatabase;

    protected $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::factory()->create();
    }

    /**
     * @test
     */
    public function an_unauthenticated_user_should_redirected_to_login()
    {
        $this->post('/api/contacts', array_merge($this->data(), ['api_token' => '']))
            ->assertRedirect('/login');

        $this->assertCount(0, Contact::all());
    }

    /**
     * @test
     *
     * */
    public function a_contact_can_be_added()
    {
        $this->post('/api/contacts', $this->data());


        $contact = Contact::first();

        $this->assertEquals('Test Name', $contact->name);
        $this->assertEquals('test@email.com', $contact->email);
        $this->assertEquals('05/26/1995', $contact->birthday->format('m/d/Y'));
        $this->assertEquals('EKITs', $contact->company);
    }

    /**
     * @test
     */
    public function fields_are_required()
    {
        collect(['name', 'email', 'birthday', 'company'])->each(function ($field) {
            $response = $this->post('/api/contacts',
                array_merge($this->data(), [$field => '']));
            $response->assertSessionHasErrors($field);
            $this->assertCount(0, Contact::all());
        });
    }

    /**
     * @test
     */
    public function email_must_be_a_valid_email()
    {
        $response = $this->post('/api/contacts',
            array_merge($this->data(), ['email' => 'NOT AN EMAIL']));
        $response->assertSessionHasErrors('email');
        $this->assertCount(0, Contact::all());
    }

    /**
     * @test
     */
    public function birthdays_are_properly_stored()
    {
        $response = $this->post('/api/contacts',
            $this->data());
        $this->assertCount(1, Contact::all());
        $this->assertInstanceOf(Carbon::class, Contact::first()->birthday);
        $this->assertEquals('05-26-1995', Contact::first()->birthday->format('m-d-Y'));
    }

    /**
     * @test
     */
    public function a_contact_can_be_retrieved()
    {
        // Create three App\Models\User instances...
        //$users = User::factory()->count(3)->create();

        $contact = Contact::factory()->create();

        $response = $this->get('/api/contacts/' . $contact->id . '?api_token=' . $this->user->api_token)
            ->assertJson([
                'name' => $contact->name,
                'email' => $contact->email,
                'birthday' => $contact->birthday,
                'company' => $contact->company
            ]);
    }

    /**
     * @test
     */
    public function a_contact_can_be_patched()
    {
        $contact = Contact::factory()->create();

        $response = $this->patch('/api/contacts/' . $contact->id,
            $this->data());

        $contact = $contact->fresh();

        $this->assertEquals('Test Name', $contact->name);
        $this->assertEquals('test@email.com', $contact->email);
        $this->assertEquals('05/26/1995', $contact->birthday->format('m/d/Y'));
        $this->assertEquals('EKITs', $contact->company);
    }

    /**
     * @test
     */
    public function a_contact_can_be_deleted()
    {
        $contact = Contact::factory()->create();

        $response = $this->delete('/api/contacts/' . $contact->id,
            ['api_token' => $this->user->api_token]);

        $this->assertCount(0, Contact::all());

    }

    /**
     * @test
     */
    public function test()
    {

    }

    private function data()
    {
        return [
            'name' => 'Test Name',
            'email' => 'test@email.com',
            'birthday' => '05/26/1995',
            'company' => 'EKITs',
            'api_token' => $this->user->api_token
        ];
    }
}
